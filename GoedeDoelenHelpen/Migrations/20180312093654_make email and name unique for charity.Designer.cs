// <auto-generated />
using System;
using GoedeDoelenHelpen.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;

namespace GoedeDoelenHelpen.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180312093654_make email and name unique for charity")]
    partial class makeemailandnameuniqueforcharity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-preview1-28290")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GoedeDoelenHelpen.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.Charity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Activated");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FiscalNumber")
                        .IsRequired();

                    b.Property<string>("IBAN")
                        .IsRequired();

                    b.Property<string>("KVKNumber")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("PostCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Charities");
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.CharityApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .IsRequired();

                    b.Property<int>("CharityApplicationUserRole");

                    b.Property<int>("CharityId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CharityId");

                    b.ToTable("CharityApplicationUsers");
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired();

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("DonationType")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Donations");

                    b.HasDiscriminator<string>("DonationType").HasValue("Donation");
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Event");
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.EventParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AplicationUserId");

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("EventId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("EventId");

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.EventTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EventId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventTeams");
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CharityId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CharityId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.TeamParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("EventId");

                    b.Property<int?>("EventTeamId");

                    b.Property<int>("TeamParticipantRole");

                    b.HasKey("Id");

                    b.HasIndex("EventTeamId");

                    b.ToTable("TeamParticipants");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TeamParticipant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.CharityDonation", b =>
                {
                    b.HasBaseType("GoedeDoelenHelpen.Data.Donation");

                    b.Property<int>("CharityId");

                    b.HasIndex("CharityId");

                    b.ToTable("CharityDonation");

                    b.HasDiscriminator().HasValue("CharityDonation");
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.EventDonation", b =>
                {
                    b.HasBaseType("GoedeDoelenHelpen.Data.Donation");

                    b.Property<int>("EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventDonation");

                    b.HasDiscriminator().HasValue("EventDonation");
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.EventParticipantDonation", b =>
                {
                    b.HasBaseType("GoedeDoelenHelpen.Data.Donation");

                    b.Property<int>("EventParticipantId");

                    b.HasIndex("EventParticipantId");

                    b.ToTable("EventParticipantDonation");

                    b.HasDiscriminator().HasValue("EventParticipantDonation");
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.EventTeamDonation", b =>
                {
                    b.HasBaseType("GoedeDoelenHelpen.Data.Donation");

                    b.Property<int>("EventTeamId");

                    b.HasIndex("EventTeamId");

                    b.ToTable("EventTeamDonation");

                    b.HasDiscriminator().HasValue("EventTeamDonation");
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.ProjectDonation", b =>
                {
                    b.HasBaseType("GoedeDoelenHelpen.Data.Donation");

                    b.Property<int>("ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectDonation");

                    b.HasDiscriminator().HasValue("ProjectDonation");
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.TeamParticipantDonation", b =>
                {
                    b.HasBaseType("GoedeDoelenHelpen.Data.Donation");

                    b.Property<int>("TeamParticipantId");

                    b.HasIndex("TeamParticipantId");

                    b.ToTable("TeamParticipantDonation");

                    b.HasDiscriminator().HasValue("TeamParticipantDonation");
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.CharityEvent", b =>
                {
                    b.HasBaseType("GoedeDoelenHelpen.Data.Event");

                    b.Property<int>("CharityId");

                    b.HasIndex("CharityId");

                    b.ToTable("CharityEvent");

                    b.HasDiscriminator().HasValue("CharityEvent");
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.ProjectEvent", b =>
                {
                    b.HasBaseType("GoedeDoelenHelpen.Data.Event");

                    b.Property<int>("ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectEvent");

                    b.HasDiscriminator().HasValue("ProjectEvent");
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.TeamParticipantActivated", b =>
                {
                    b.HasBaseType("GoedeDoelenHelpen.Data.TeamParticipant");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired();

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("TeamParticipantActivated");

                    b.HasDiscriminator().HasValue("TeamParticipantActivated");
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.TeamParticipantNotActivated", b =>
                {
                    b.HasBaseType("GoedeDoelenHelpen.Data.TeamParticipant");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.ToTable("TeamParticipantNotActivated");

                    b.HasDiscriminator().HasValue("TeamParticipantNotActivated");
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.CharityApplicationUser", b =>
                {
                    b.HasOne("GoedeDoelenHelpen.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("CharityApplicationUsers")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GoedeDoelenHelpen.Data.Charity", "Charity")
                        .WithMany("CharityApplicationUsers")
                        .HasForeignKey("CharityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.Donation", b =>
                {
                    b.HasOne("GoedeDoelenHelpen.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("Donations")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.EventParticipant", b =>
                {
                    b.HasOne("GoedeDoelenHelpen.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("EventParticipants")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("GoedeDoelenHelpen.Data.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.EventTeam", b =>
                {
                    b.HasOne("GoedeDoelenHelpen.Data.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.Project", b =>
                {
                    b.HasOne("GoedeDoelenHelpen.Data.Charity", "Charity")
                        .WithMany()
                        .HasForeignKey("CharityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.TeamParticipant", b =>
                {
                    b.HasOne("GoedeDoelenHelpen.Data.EventTeam", "EventTeam")
                        .WithMany("TeamParticipants")
                        .HasForeignKey("EventTeamId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GoedeDoelenHelpen.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GoedeDoelenHelpen.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GoedeDoelenHelpen.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GoedeDoelenHelpen.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.CharityDonation", b =>
                {
                    b.HasOne("GoedeDoelenHelpen.Data.Charity", "Charity")
                        .WithMany("Donations")
                        .HasForeignKey("CharityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.EventDonation", b =>
                {
                    b.HasOne("GoedeDoelenHelpen.Data.Event", "Event")
                        .WithMany("Donations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.EventParticipantDonation", b =>
                {
                    b.HasOne("GoedeDoelenHelpen.Data.EventParticipant", "EventParticipant")
                        .WithMany("Donations")
                        .HasForeignKey("EventParticipantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.EventTeamDonation", b =>
                {
                    b.HasOne("GoedeDoelenHelpen.Data.EventTeam", "EventTeam")
                        .WithMany("Donations")
                        .HasForeignKey("EventTeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.ProjectDonation", b =>
                {
                    b.HasOne("GoedeDoelenHelpen.Data.Project", "Project")
                        .WithMany("Donations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.TeamParticipantDonation", b =>
                {
                    b.HasOne("GoedeDoelenHelpen.Data.TeamParticipant", "TeamParticipant")
                        .WithMany("Donations")
                        .HasForeignKey("TeamParticipantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.CharityEvent", b =>
                {
                    b.HasOne("GoedeDoelenHelpen.Data.Charity", "Charity")
                        .WithMany("Events")
                        .HasForeignKey("CharityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.ProjectEvent", b =>
                {
                    b.HasOne("GoedeDoelenHelpen.Data.Project", "Project")
                        .WithMany("Events")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GoedeDoelenHelpen.Data.TeamParticipantActivated", b =>
                {
                    b.HasOne("GoedeDoelenHelpen.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("TeamParticipants")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
